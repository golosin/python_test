{"uid":"afab2960541f3836","name":"test_choice_pipeline","fullName":"test_t4.test_common_bases.test_2_choice_pipeline#test_choice_pipeline","historyId":"14a4d9e8786fb7c05aa28dfea4c58e08","time":{"start":1654250473138,"stop":1654250473138,"duration":0},"description":"\n    1) Авторизация в системе T4MP.v2\n    2) Выбор пайплайна и МП\n    ","descriptionHtml":"<pre><code>1) Авторизация в системе T4MP.v2\n2) Выбор пайплайна и МП\n</code></pre>\n","status":"broken","statusMessage":"selenium.common.exceptions.WebDriverException: Message: unknown error: Chrome failed to start: exited abnormally.\n  (unknown error: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nStacktrace:\n#0 0x559fc5c73533 <unknown>\n#1 0x559fc59d21e8 <unknown>\n#2 0x559fc59f554a <unknown>\n#3 0x559fc59f0c4a <unknown>\n#4 0x559fc5a2bd0a <unknown>\n#5 0x559fc5a25e33 <unknown>\n#6 0x559fc59fb71a <unknown>\n#7 0x559fc59fc875 <unknown>\n#8 0x559fc5cb7e1d <unknown>\n#9 0x559fc5cbb751 <unknown>\n#10 0x559fc5ca207e <unknown>\n#11 0x559fc5cbc388 <unknown>\n#12 0x559fc5c96fe0 <unknown>\n#13 0x559fc5cd8748 <unknown>\n#14 0x559fc5cd88c8 <unknown>\n#15 0x559fc5cf270d <unknown>\n#16 0x7f8f1def6609 <unknown>","statusTrace":"get_chrome_options = <selenium.webdriver.chrome.options.Options object at 0x7f64da43d5a0>\n\n    @pytest.fixture\n    def get_webdriver(get_chrome_options):\n        options = get_chrome_options\n        # driver = webdriver.Remote(\n        #     command_executor=f\"http://selenium__standalone-chrome:4444/wd/hub\",\n        #     options=options\n        # )\n>       driver = webdriver.Chrome(options=options)\n\nconftest.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.10.4/x64/lib/python3.10/site-packages/selenium/webdriver/chrome/webdriver.py:70: in __init__\n    super(WebDriver, self).__init__(DesiredCapabilities.CHROME['browserName'], \"goog\",\n/opt/hostedtoolcache/Python/3.10.4/x64/lib/python3.10/site-packages/selenium/webdriver/chromium/webdriver.py:92: in __init__\n    RemoteWebDriver.__init__(\n/opt/hostedtoolcache/Python/3.10.4/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:275: in __init__\n    self.start_session(capabilities, browser_profile)\n/opt/hostedtoolcache/Python/3.10.4/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:365: in start_session\n    response = self.execute(Command.NEW_SESSION, parameters)\n/opt/hostedtoolcache/Python/3.10.4/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:430: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f64da43cf70>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: Chrome failed to start: exited a...\\\\n#14 0x559fc5cd88c8 \\\\u003Cunknown>\\\\n#15 0x559fc5cf270d \\\\u003Cunknown>\\\\n#16 0x7f8f1def6609 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: Chrome failed to start: exited abnormally.\nE         (unknown error: DevToolsActivePort file doesn't exist)\nE         (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nE       Stacktrace:\nE       #0 0x559fc5c73533 <unknown>\nE       #1 0x559fc59d21e8 <unknown>\nE       #2 0x559fc59f554a <unknown>\nE       #3 0x559fc59f0c4a <unknown>\nE       #4 0x559fc5a2bd0a <unknown>\nE       #5 0x559fc5a25e33 <unknown>\nE       #6 0x559fc59fb71a <unknown>\nE       #7 0x559fc59fc875 <unknown>\nE       #8 0x559fc5cb7e1d <unknown>\nE       #9 0x559fc5cbb751 <unknown>\nE       #10 0x559fc5ca207e <unknown>\nE       #11 0x559fc5cbc388 <unknown>\nE       #12 0x559fc5c96fe0 <unknown>\nE       #13 0x559fc5cd8748 <unknown>\nE       #14 0x559fc5cd88c8 <unknown>\nE       #15 0x559fc5cf270d <unknown>\nE       #16 0x7f8f1def6609 <unknown>\n\n/opt/hostedtoolcache/Python/3.10.4/x64/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:247: WebDriverException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"get_webdriver","time":{"start":1654250473139,"stop":1654250473754,"duration":615},"status":"broken","statusMessage":"selenium.common.exceptions.WebDriverException: Message: unknown error: Chrome failed to start: exited abnormally.\n  (unknown error: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nStacktrace:\n#0 0x559fc5c73533 <unknown>\n#1 0x559fc59d21e8 <unknown>\n#2 0x559fc59f554a <unknown>\n#3 0x559fc59f0c4a <unknown>\n#4 0x559fc5a2bd0a <unknown>\n#5 0x559fc5a25e33 <unknown>\n#6 0x559fc59fb71a <unknown>\n#7 0x559fc59fc875 <unknown>\n#8 0x559fc5cb7e1d <unknown>\n#9 0x559fc5cbb751 <unknown>\n#10 0x559fc5ca207e <unknown>\n#11 0x559fc5cbc388 <unknown>\n#12 0x559fc5c96fe0 <unknown>\n#13 0x559fc5cd8748 <unknown>\n#14 0x559fc5cd88c8 <unknown>\n#15 0x559fc5cf270d <unknown>\n#16 0x7f8f1def6609 <unknown>\n\n","statusTrace":"  File \"/opt/hostedtoolcache/Python/3.10.4/x64/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/opt/hostedtoolcache/Python/3.10.4/x64/lib/python3.10/site-packages/_pytest/fixtures.py\", line 1111, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n  File \"/opt/hostedtoolcache/Python/3.10.4/x64/lib/python3.10/site-packages/_pytest/fixtures.py\", line 890, in call_fixture_func\n    fixture_result = fixturefunc(**kwargs)\n  File \"/home/runner/work/python_test/python_test/conftest.py\", line 22, in get_webdriver\n    driver = webdriver.Chrome(options=options)\n  File \"/opt/hostedtoolcache/Python/3.10.4/x64/lib/python3.10/site-packages/selenium/webdriver/chrome/webdriver.py\", line 70, in __init__\n    super(WebDriver, self).__init__(DesiredCapabilities.CHROME['browserName'], \"goog\",\n  File \"/opt/hostedtoolcache/Python/3.10.4/x64/lib/python3.10/site-packages/selenium/webdriver/chromium/webdriver.py\", line 92, in __init__\n    RemoteWebDriver.__init__(\n  File \"/opt/hostedtoolcache/Python/3.10.4/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py\", line 275, in __init__\n    self.start_session(capabilities, browser_profile)\n  File \"/opt/hostedtoolcache/Python/3.10.4/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py\", line 365, in start_session\n    response = self.execute(Command.NEW_SESSION, parameters)\n  File \"/opt/hostedtoolcache/Python/3.10.4/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py\", line 430, in execute\n    self.error_handler.check_response(response)\n  File \"/opt/hostedtoolcache/Python/3.10.4/x64/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py\", line 247, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true},{"name":"get_chrome_options","time":{"start":1654250473139,"stop":1654250473139,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"afterStages":[],"labels":[{"name":"feature","value":"Базовое тестирование"},{"name":"story","value":"2) Открытие пайплайна и выбор МП"},{"name":"severity","value":"critical"},{"name":"parentSuite","value":"test_t4.test_common_bases"},{"name":"suite","value":"test_2_choice_pipeline"},{"name":"host","value":"fv-az177-982"},{"name":"thread","value":"2747-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_t4.test_common_bases.test_2_choice_pipeline"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"critical","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":3,"unknown":0,"total":4},"items":[{"uid":"77656152a67ab556","reportUrl":"https://golosin.github.io/python_test/107//#testresult/77656152a67ab556","status":"passed","time":{"start":1654249256280,"stop":1654249258340,"duration":2060}},{"uid":"32e2ba2bd34ca6d9","reportUrl":"https://golosin.github.io/python_test/106//#testresult/32e2ba2bd34ca6d9","status":"passed","time":{"start":1654248918888,"stop":1654248920920,"duration":2032}},{"uid":"c34c649b58735662","reportUrl":"https://golosin.github.io/python_test/105//#testresult/c34c649b58735662","status":"passed","time":{"start":1654248582604,"stop":1654248584708,"duration":2104}}]},"tags":[]},"source":"afab2960541f3836.json","parameterValues":[]}