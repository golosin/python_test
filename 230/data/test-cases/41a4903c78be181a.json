{"uid":"41a4903c78be181a","name":"8) Изменение цен/остатков на WB через YML feed","fullName":"test_t4.test_functional.test_8_change_feed_wb_price_stock#test_add_feed_checkin_feed_product","historyId":"0720b764983ef6832c7ca9d5f4a202db","time":{"start":1658301382037,"stop":1658301400531,"duration":18494},"description":"\n     1) Авторизация в системе T4MP.v2\n     2) Выбор пайплайна и МП\n     3) Открытие \"Feed Products\"\n     4) Ввод в поле \"Search\" ID тестового товара\n     5) Проверка значения \"id\" в таблице для тестового товара\n     6) Получение значения \"Sale\" в таблице для тестового товара'\n     7) Получение значения \"Stock\" в таблице для тестового товара'\n     8) Запрос к API WB, получение \"price\" и \"stock\"\n     9) Исходя из текущего \"price\" и \"stock\" выбор \"YML feed\" для изменения цен и остатков\n    10) Возврат на страницу кубиков\n    11) Открытие \"Feeds list\"\n    12) Выбор \"WB feed\"\n    13) Открытие списка \"File type\"\n    14) Выбор типа \"Yandex Feed\"\n    15) Заполнение поля \"Url\" для \"WB source\"\n    16) Нажатие кнопки \"Save\"\n    17) Ожидание когда пропадет элемент \"Feed config save\"\n    18) Выбор \"WB feed\"\n    19) Нажатие кнопки \"Load products\"\n    20) Ожидание когда пропадет эллемент \"Feed product import started\"\n    21) Переход на \"feed list\" нажатием кнопки \"<--\"\n    22) Ожидание статуса \"Success\" для добавленного фида\n    23) Закрытие \"Feed list\"\n    24) Открытие \"Feed Products\"\n    25) Проверка значения \"id\" в таблице для тестового товара\n    26) Получение значения \"Sale\" в таблице для тестового товара'\n    27) Получение значения \"Stock\" в таблице для тестового товара'\n    28) Сравнение измененных \"price\" и \"stock\", с значениями в таблице \"Feed products\"\n    29) Запрос к API WB, получение \"price\" и \"stock\", сравнение со значениями в таблице \"Feed products\"\n    ","descriptionHtml":"<pre><code> 1) Авторизация в системе T4MP.v2\n 2) Выбор пайплайна и МП\n 3) Открытие &quot;Feed Products&quot;\n 4) Ввод в поле &quot;Search&quot; ID тестового товара\n 5) Проверка значения &quot;id&quot; в таблице для тестового товара\n 6) Получение значения &quot;Sale&quot; в таблице для тестового товара'\n 7) Получение значения &quot;Stock&quot; в таблице для тестового товара'\n 8) Запрос к API WB, получение &quot;price&quot; и &quot;stock&quot;\n 9) Исходя из текущего &quot;price&quot; и &quot;stock&quot; выбор &quot;YML feed&quot; для изменения цен и остатков\n10) Возврат на страницу кубиков\n11) Открытие &quot;Feeds list&quot;\n12) Выбор &quot;WB feed&quot;\n13) Открытие списка &quot;File type&quot;\n14) Выбор типа &quot;Yandex Feed&quot;\n15) Заполнение поля &quot;Url&quot; для &quot;WB source&quot;\n16) Нажатие кнопки &quot;Save&quot;\n17) Ожидание когда пропадет элемент &quot;Feed config save&quot;\n18) Выбор &quot;WB feed&quot;\n19) Нажатие кнопки &quot;Load products&quot;\n20) Ожидание когда пропадет эллемент &quot;Feed product import started&quot;\n21) Переход на &quot;feed list&quot; нажатием кнопки &quot;&lt;--&quot;\n22) Ожидание статуса &quot;Success&quot; для добавленного фида\n23) Закрытие &quot;Feed list&quot;\n24) Открытие &quot;Feed Products&quot;\n25) Проверка значения &quot;id&quot; в таблице для тестового товара\n26) Получение значения &quot;Sale&quot; в таблице для тестового товара'\n27) Получение значения &quot;Stock&quot; в таблице для тестового товара'\n28) Сравнение измененных &quot;price&quot; и &quot;stock&quot;, с значениями в таблице &quot;Feed products&quot;\n29) Запрос к API WB, получение &quot;price&quot; и &quot;stock&quot;, сравнение со значениями в таблице &quot;Feed products&quot;\n</code></pre>\n","status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x55a02dc17b13 <unknown>\n#1 0x55a02da1e688 <unknown>\n#2 0x55a02da55cc7 <unknown>\n#3 0x55a02da55e91 <unknown>\n#4 0x55a02da88e34 <unknown>\n#5 0x55a02da738dd <unknown>\n#6 0x55a02da86b94 <unknown>\n#7 0x55a02da737a3 <unknown>\n#8 0x55a02da490ea <unknown>\n#9 0x55a02da4a225 <unknown>\n#10 0x55a02dc5f2dd <unknown>\n#11 0x55a02dc632c7 <unknown>\n#12 0x55a02dc4922e <unknown>\n#13 0x55a02dc640a8 <unknown>\n#14 0x55a02dc3dbc0 <unknown>\n#15 0x55a02dc806c8 <unknown>\n#16 0x55a02dc80848 <unknown>\n#17 0x55a02dc9ac0d <unknown>\n#18 0x7fd54cc8f609 <unknown>","statusTrace":"get_driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"dbe25a964d503a953cdc6d33d5c41ae8\")>\nget_init_data = {'GF_desktop_location': '/test_data_Googlefeed/GFtest.xml', 'GF_name_feed': 'Google_feed_auto_test', 'GF_url_location': 'https://test.com', 'csv_desktop_location': '/test_data_CSV_feed/CSVtest.xml', ...}\n\n    @allure.feature('Тест стенд v.'+get_app_version())\n    @allure.story('Функциональное тестирование')\n    @allure.title('8) Изменение цен/остатков на WB через YML feed')\n    @allure.severity('critical')\n    def test_add_feed_checkin_feed_product(get_driver, get_init_data):\n        \"\"\"\n         1) Авторизация в системе T4MP.v2\n         2) Выбор пайплайна и МП\n         3) Открытие \"Feed Products\"\n         4) Ввод в поле \"Search\" ID тестового товара\n         5) Проверка значения \"id\" в таблице для тестового товара\n         6) Получение значения \"Sale\" в таблице для тестового товара'\n         7) Получение значения \"Stock\" в таблице для тестового товара'\n         8) Запрос к API WB, получение \"price\" и \"stock\"\n         9) Исходя из текущего \"price\" и \"stock\" выбор \"YML feed\" для изменения цен и остатков\n        10) Возврат на страницу кубиков\n        11) Открытие \"Feeds list\"\n        12) Выбор \"WB feed\"\n        13) Открытие списка \"File type\"\n        14) Выбор типа \"Yandex Feed\"\n        15) Заполнение поля \"Url\" для \"WB source\"\n        16) Нажатие кнопки \"Save\"\n        17) Ожидание когда пропадет элемент \"Feed config save\"\n        18) Выбор \"WB feed\"\n        19) Нажатие кнопки \"Load products\"\n        20) Ожидание когда пропадет эллемент \"Feed product import started\"\n        21) Переход на \"feed list\" нажатием кнопки \"<--\"\n        22) Ожидание статуса \"Success\" для добавленного фида\n        23) Закрытие \"Feed list\"\n        24) Открытие \"Feed Products\"\n        25) Проверка значения \"id\" в таблице для тестового товара\n        26) Получение значения \"Sale\" в таблице для тестового товара'\n        27) Получение значения \"Stock\" в таблице для тестового товара'\n        28) Сравнение измененных \"price\" и \"stock\", с значениями в таблице \"Feed products\"\n        29) Запрос к API WB, получение \"price\" и \"stock\", сравнение со значениями в таблице \"Feed products\"\n        \"\"\"\n    \n    \n        driver = get_driver\n        dict_init_data = get_init_data\n        dict_xpath_login = init_dict_xpath_login(dict_init_data)\n        dict_xpath_product_feed = init_dict_xpath_product_feed(dict_init_data)\n        dict_xpath_base = init_dict_xpath_base(dict_init_data)\n        feed_data = parsing_data_feed()\n    \n        id_prod = 100591961  # \"ID\" тестового товара\n        # Данные первого фида\n        feed_change_1 = [100000, 0, \"https://www.dropbox.com/s/pq7z3p963fn6na8/dop_feed_1_prod_stock_0.xml?dl=0\"]\n        # Данные второго фида\n        feed_change_2 = [222222, 2, \"https://www.dropbox.com/s/jpzcno80ui3ruyl/dop_feed_1_prod_stock_2.xml?dl=0\"]\n        # Ссылка для загрузки фида изменения цен и остатков\n        change_feed_url = ''\n    \n        # 1) Авторизация\n        login_T4(driver, dict_init_data, dict_xpath_login)\n    \n        # 2) Выбор пайплайна и МП\n        choice_pipeline_mp(driver, dict_xpath_base, dict_xpath_product_feed)\n    \n        # 3) общая страница -> Feed Products (клик)\n        product_feed = wait_of_element_located('выбор кубика \"Feed Products\"',\n                                               dict_xpath_product_feed['15'], driver)\n        product_feed.click()\n    \n        # 4) Feed products -> \"Search\"\n        search = wait_of_element_located('ввод \"ID\" продукта в поле \"Search by name or ID\"',\n                                         dict_xpath_product_feed['17'], driver)\n        search.send_keys(id_prod)\n        search.send_keys(u'\\ue007')\n    \n        # 5) Проверка значения \"id\" в таблице для тестового товара\n        xpath_id = \"//tbody[@class='ant-table-tbody']/tr[2]/td[2]\"\n>       id_check = wait_of_element_located('ожидание эллемента \"id\" в таблице \"Feed products\" для тестового товара',\n                                           xpath_id, driver)\n\ntest_t4/test_functional/test_8_change_feed_wb_price_stock.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nBase/Base_functions.py:24: in wait_of_element_located\n    element = WebDriverWait(driver_init, 15).until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"dbe25a964d503a953cdc6d33d5c41ae8\")>\nmethod = <function presence_of_element_located.<locals>._predicate at 0x7fd529c38430>\nmessage = ''\n\n    def until(self, method, message: str = \"\"):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       #0 0x55a02dc17b13 <unknown>\nE       #1 0x55a02da1e688 <unknown>\nE       #2 0x55a02da55cc7 <unknown>\nE       #3 0x55a02da55e91 <unknown>\nE       #4 0x55a02da88e34 <unknown>\nE       #5 0x55a02da738dd <unknown>\nE       #6 0x55a02da86b94 <unknown>\nE       #7 0x55a02da737a3 <unknown>\nE       #8 0x55a02da490ea <unknown>\nE       #9 0x55a02da4a225 <unknown>\nE       #10 0x55a02dc5f2dd <unknown>\nE       #11 0x55a02dc632c7 <unknown>\nE       #12 0x55a02dc4922e <unknown>\nE       #13 0x55a02dc640a8 <unknown>\nE       #14 0x55a02dc3dbc0 <unknown>\nE       #15 0x55a02dc806c8 <unknown>\nE       #16 0x55a02dc80848 <unknown>\nE       #17 0x55a02dc9ac0d <unknown>\nE       #18 0x7fd54cc8f609 <unknown>\n\n/opt/hostedtoolcache/Python/3.10.5/x64/lib/python3.10/site-packages/selenium/webdriver/support/wait.py:90: TimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"get_webdriver","time":{"start":1658301379299,"stop":1658301379942,"duration":643},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"get_chrome_options","time":{"start":1658301379299,"stop":1658301379299,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"get_init_data","time":{"start":1658301379942,"stop":1658301379942,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"get_driver","time":{"start":1658301379942,"stop":1658301382037,"duration":2095},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"testStage":{"description":"\n     1) Авторизация в системе T4MP.v2\n     2) Выбор пайплайна и МП\n     3) Открытие \"Feed Products\"\n     4) Ввод в поле \"Search\" ID тестового товара\n     5) Проверка значения \"id\" в таблице для тестового товара\n     6) Получение значения \"Sale\" в таблице для тестового товара'\n     7) Получение значения \"Stock\" в таблице для тестового товара'\n     8) Запрос к API WB, получение \"price\" и \"stock\"\n     9) Исходя из текущего \"price\" и \"stock\" выбор \"YML feed\" для изменения цен и остатков\n    10) Возврат на страницу кубиков\n    11) Открытие \"Feeds list\"\n    12) Выбор \"WB feed\"\n    13) Открытие списка \"File type\"\n    14) Выбор типа \"Yandex Feed\"\n    15) Заполнение поля \"Url\" для \"WB source\"\n    16) Нажатие кнопки \"Save\"\n    17) Ожидание когда пропадет элемент \"Feed config save\"\n    18) Выбор \"WB feed\"\n    19) Нажатие кнопки \"Load products\"\n    20) Ожидание когда пропадет эллемент \"Feed product import started\"\n    21) Переход на \"feed list\" нажатием кнопки \"<--\"\n    22) Ожидание статуса \"Success\" для добавленного фида\n    23) Закрытие \"Feed list\"\n    24) Открытие \"Feed Products\"\n    25) Проверка значения \"id\" в таблице для тестового товара\n    26) Получение значения \"Sale\" в таблице для тестового товара'\n    27) Получение значения \"Stock\" в таблице для тестового товара'\n    28) Сравнение измененных \"price\" и \"stock\", с значениями в таблице \"Feed products\"\n    29) Запрос к API WB, получение \"price\" и \"stock\", сравнение со значениями в таблице \"Feed products\"\n    ","status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x55a02dc17b13 <unknown>\n#1 0x55a02da1e688 <unknown>\n#2 0x55a02da55cc7 <unknown>\n#3 0x55a02da55e91 <unknown>\n#4 0x55a02da88e34 <unknown>\n#5 0x55a02da738dd <unknown>\n#6 0x55a02da86b94 <unknown>\n#7 0x55a02da737a3 <unknown>\n#8 0x55a02da490ea <unknown>\n#9 0x55a02da4a225 <unknown>\n#10 0x55a02dc5f2dd <unknown>\n#11 0x55a02dc632c7 <unknown>\n#12 0x55a02dc4922e <unknown>\n#13 0x55a02dc640a8 <unknown>\n#14 0x55a02dc3dbc0 <unknown>\n#15 0x55a02dc806c8 <unknown>\n#16 0x55a02dc80848 <unknown>\n#17 0x55a02dc9ac0d <unknown>\n#18 0x7fd54cc8f609 <unknown>","statusTrace":"get_driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"dbe25a964d503a953cdc6d33d5c41ae8\")>\nget_init_data = {'GF_desktop_location': '/test_data_Googlefeed/GFtest.xml', 'GF_name_feed': 'Google_feed_auto_test', 'GF_url_location': 'https://test.com', 'csv_desktop_location': '/test_data_CSV_feed/CSVtest.xml', ...}\n\n    @allure.feature('Тест стенд v.'+get_app_version())\n    @allure.story('Функциональное тестирование')\n    @allure.title('8) Изменение цен/остатков на WB через YML feed')\n    @allure.severity('critical')\n    def test_add_feed_checkin_feed_product(get_driver, get_init_data):\n        \"\"\"\n         1) Авторизация в системе T4MP.v2\n         2) Выбор пайплайна и МП\n         3) Открытие \"Feed Products\"\n         4) Ввод в поле \"Search\" ID тестового товара\n         5) Проверка значения \"id\" в таблице для тестового товара\n         6) Получение значения \"Sale\" в таблице для тестового товара'\n         7) Получение значения \"Stock\" в таблице для тестового товара'\n         8) Запрос к API WB, получение \"price\" и \"stock\"\n         9) Исходя из текущего \"price\" и \"stock\" выбор \"YML feed\" для изменения цен и остатков\n        10) Возврат на страницу кубиков\n        11) Открытие \"Feeds list\"\n        12) Выбор \"WB feed\"\n        13) Открытие списка \"File type\"\n        14) Выбор типа \"Yandex Feed\"\n        15) Заполнение поля \"Url\" для \"WB source\"\n        16) Нажатие кнопки \"Save\"\n        17) Ожидание когда пропадет элемент \"Feed config save\"\n        18) Выбор \"WB feed\"\n        19) Нажатие кнопки \"Load products\"\n        20) Ожидание когда пропадет эллемент \"Feed product import started\"\n        21) Переход на \"feed list\" нажатием кнопки \"<--\"\n        22) Ожидание статуса \"Success\" для добавленного фида\n        23) Закрытие \"Feed list\"\n        24) Открытие \"Feed Products\"\n        25) Проверка значения \"id\" в таблице для тестового товара\n        26) Получение значения \"Sale\" в таблице для тестового товара'\n        27) Получение значения \"Stock\" в таблице для тестового товара'\n        28) Сравнение измененных \"price\" и \"stock\", с значениями в таблице \"Feed products\"\n        29) Запрос к API WB, получение \"price\" и \"stock\", сравнение со значениями в таблице \"Feed products\"\n        \"\"\"\n    \n    \n        driver = get_driver\n        dict_init_data = get_init_data\n        dict_xpath_login = init_dict_xpath_login(dict_init_data)\n        dict_xpath_product_feed = init_dict_xpath_product_feed(dict_init_data)\n        dict_xpath_base = init_dict_xpath_base(dict_init_data)\n        feed_data = parsing_data_feed()\n    \n        id_prod = 100591961  # \"ID\" тестового товара\n        # Данные первого фида\n        feed_change_1 = [100000, 0, \"https://www.dropbox.com/s/pq7z3p963fn6na8/dop_feed_1_prod_stock_0.xml?dl=0\"]\n        # Данные второго фида\n        feed_change_2 = [222222, 2, \"https://www.dropbox.com/s/jpzcno80ui3ruyl/dop_feed_1_prod_stock_2.xml?dl=0\"]\n        # Ссылка для загрузки фида изменения цен и остатков\n        change_feed_url = ''\n    \n        # 1) Авторизация\n        login_T4(driver, dict_init_data, dict_xpath_login)\n    \n        # 2) Выбор пайплайна и МП\n        choice_pipeline_mp(driver, dict_xpath_base, dict_xpath_product_feed)\n    \n        # 3) общая страница -> Feed Products (клик)\n        product_feed = wait_of_element_located('выбор кубика \"Feed Products\"',\n                                               dict_xpath_product_feed['15'], driver)\n        product_feed.click()\n    \n        # 4) Feed products -> \"Search\"\n        search = wait_of_element_located('ввод \"ID\" продукта в поле \"Search by name or ID\"',\n                                         dict_xpath_product_feed['17'], driver)\n        search.send_keys(id_prod)\n        search.send_keys(u'\\ue007')\n    \n        # 5) Проверка значения \"id\" в таблице для тестового товара\n        xpath_id = \"//tbody[@class='ant-table-tbody']/tr[2]/td[2]\"\n>       id_check = wait_of_element_located('ожидание эллемента \"id\" в таблице \"Feed products\" для тестового товара',\n                                           xpath_id, driver)\n\ntest_t4/test_functional/test_8_change_feed_wb_price_stock.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nBase/Base_functions.py:24: in wait_of_element_located\n    element = WebDriverWait(driver_init, 15).until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"dbe25a964d503a953cdc6d33d5c41ae8\")>\nmethod = <function presence_of_element_located.<locals>._predicate at 0x7fd529c38430>\nmessage = ''\n\n    def until(self, method, message: str = \"\"):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       #0 0x55a02dc17b13 <unknown>\nE       #1 0x55a02da1e688 <unknown>\nE       #2 0x55a02da55cc7 <unknown>\nE       #3 0x55a02da55e91 <unknown>\nE       #4 0x55a02da88e34 <unknown>\nE       #5 0x55a02da738dd <unknown>\nE       #6 0x55a02da86b94 <unknown>\nE       #7 0x55a02da737a3 <unknown>\nE       #8 0x55a02da490ea <unknown>\nE       #9 0x55a02da4a225 <unknown>\nE       #10 0x55a02dc5f2dd <unknown>\nE       #11 0x55a02dc632c7 <unknown>\nE       #12 0x55a02dc4922e <unknown>\nE       #13 0x55a02dc640a8 <unknown>\nE       #14 0x55a02dc3dbc0 <unknown>\nE       #15 0x55a02dc806c8 <unknown>\nE       #16 0x55a02dc80848 <unknown>\nE       #17 0x55a02dc9ac0d <unknown>\nE       #18 0x7fd54cc8f609 <unknown>\n\n/opt/hostedtoolcache/Python/3.10.5/x64/lib/python3.10/site-packages/selenium/webdriver/support/wait.py:90: TimeoutException","steps":[{"name":"Действие: 'ввод в поле \"Email\"'","time":{"start":1658301382038,"stop":1658301382058,"duration":20},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"description","value":"'ввод в поле \"Email\"'"},{"name":"xpath","value":"'//input[@id='email']'"},{"name":"driver_init","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"dbe25a964d503a953cdc6d33d5c41ae8\")>"}],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Действие: 'ввод в поле \"Password\"'","time":{"start":1658301382218,"stop":1658301382229,"duration":11},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"description","value":"'ввод в поле \"Password\"'"},{"name":"xpath","value":"'//input[@id='password']'"},{"name":"driver_init","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"dbe25a964d503a953cdc6d33d5c41ae8\")>"}],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Действие: 'нажатие кнопки \"Sing in\"'","time":{"start":1658301382333,"stop":1658301382343,"duration":10},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"description","value":"'нажатие кнопки \"Sing in\"'"},{"name":"xpath","value":"'//button[@data-test-id='login']'"},{"name":"driver_init","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"dbe25a964d503a953cdc6d33d5c41ae8\")>"}],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Действие: 'выбор указанного пайплайна'","time":{"start":1658301382395,"stop":1658301383427,"duration":1032},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"description","value":"'выбор указанного пайплайна'"},{"name":"xpath","value":"'//div[text()='test_import_feed']'"},{"name":"driver_init","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"dbe25a964d503a953cdc6d33d5c41ae8\")>"}],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Действие: 'выбор МП \"Wildberries\"'","time":{"start":1658301383487,"stop":1658301384013,"duration":526},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"description","value":"'выбор МП \"Wildberries\"'"},{"name":"xpath","value":"'//div[text()='Wildberries']'"},{"name":"driver_init","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"dbe25a964d503a953cdc6d33d5c41ae8\")>"}],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Действие: 'выбор кубика \"Feed Products\"'","time":{"start":1658301384045,"stop":1658301384061,"duration":16},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"description","value":"'выбор кубика \"Feed Products\"'"},{"name":"xpath","value":"'//span[@aria-label='file-add']'"},{"name":"driver_init","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"dbe25a964d503a953cdc6d33d5c41ae8\")>"}],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Действие: 'ввод \"ID\" продукта в поле \"Search by name or ID\"'","time":{"start":1658301384101,"stop":1658301384624,"duration":523},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"description","value":"'ввод \"ID\" продукта в поле \"Search by name or ID\"'"},{"name":"xpath","value":"'//input[@placeholder='Search by name or ID']'"},{"name":"driver_init","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"dbe25a964d503a953cdc6d33d5c41ae8\")>"}],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Действие: 'ожидание эллемента \"id\" в таблице \"Feed products\" для тестового товара'","time":{"start":1658301385242,"stop":1658301400530,"duration":15288},"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x55a02dc17b13 <unknown>\n#1 0x55a02da1e688 <unknown>\n#2 0x55a02da55cc7 <unknown>\n#3 0x55a02da55e91 <unknown>\n#4 0x55a02da88e34 <unknown>\n#5 0x55a02da738dd <unknown>\n#6 0x55a02da86b94 <unknown>\n#7 0x55a02da737a3 <unknown>\n#8 0x55a02da490ea <unknown>\n#9 0x55a02da4a225 <unknown>\n#10 0x55a02dc5f2dd <unknown>\n#11 0x55a02dc632c7 <unknown>\n#12 0x55a02dc4922e <unknown>\n#13 0x55a02dc640a8 <unknown>\n#14 0x55a02dc3dbc0 <unknown>\n#15 0x55a02dc806c8 <unknown>\n#16 0x55a02dc80848 <unknown>\n#17 0x55a02dc9ac0d <unknown>\n#18 0x7fd54cc8f609 <unknown>\n\n","statusTrace":"  File \"/opt/hostedtoolcache/Python/3.10.5/x64/lib/python3.10/site-packages/allure_commons/_allure.py\", line 172, in impl\n    return func(*a, **kw)\n  File \"/home/runner/work/python_test/python_test/Base/Base_functions.py\", line 24, in wait_of_element_located\n    element = WebDriverWait(driver_init, 15).until(\n  File \"/opt/hostedtoolcache/Python/3.10.5/x64/lib/python3.10/site-packages/selenium/webdriver/support/wait.py\", line 90, in until\n    raise TimeoutException(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[{"name":"description","value":"'ожидание эллемента \"id\" в таблице \"Feed products\" для тестового товара'"},{"name":"xpath","value":"'//tbody[@class='ant-table-tbody']/tr[2]/td[2]'"},{"name":"driver_init","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"dbe25a964d503a953cdc6d33d5c41ae8\")>"}],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true}],"attachments":[],"parameters":[],"stepsCount":8,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[{"name":"get_driver::0","time":{"start":1658301400541,"stop":1658301400654,"duration":113},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"labels":[{"name":"feature","value":"Тест стенд v.0.9.7"},{"name":"severity","value":"critical"},{"name":"story","value":"Функциональное тестирование"},{"name":"parentSuite","value":"test_t4.test_functional"},{"name":"suite","value":"test_8_change_feed_wb_price_stock"},{"name":"host","value":"fv-az131-814"},{"name":"thread","value":"2904-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_t4.test_functional.test_8_change_feed_wb_price_stock"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"critical","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"41a4903c78be181a.json","parameterValues":[]}